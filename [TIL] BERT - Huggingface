<Main concepts - 3 classes>

1. Model classes

2. configuration classes

3. tokenizer classes

- 각각의 모델에 쓰이는 단어 / 모델에 넣기 위해 문자를 토큰 인덱스 번호로 변경해주는 인코딩,디코딩

​

pretrained model 로 바로 인스턴스화할 수 있고, 로컬에 저장할 수도 있다.

저장할때는 다음 함수를 사용한다.

​

1. from_pretrained() - pretrained mode을 인스턴스화 해준다.

2. save_pretrained() - model, configuration, tokenizer을 저장한다. 저장된 것은 from_pretrained()로 불러올 수 있다.

​

어떻게 3가지 클래스를 사용하고, 인스턴스화 하는지 예제를 보여주겠다.

예제는 크게 2가지 파트로 구성되어 있다.

​

[Main Classes] : 위 3개 클래스의 [공통 functionalities/method/attributes]와 학습을 최적화하기 위한 클래스를 보여주는 섹션이다.

[Package reference] : 모델의 고유한 구조와 그들을 호출할때 지켜야하는 특정 input/output을 보여준다.

​

​

[BERT example]

 BERTTokenizer 를 활용하여 *tokenized input 를 한다. 

(*Text를 토크나이즈하고, input에 넣을 수 있게 인덱스값으로 변경한다.)

import torch
from transformers import BertTokenizer, BertModel, BertForMaskedLM

# OPTIONAL: if you want to have more information on what's happening under the hood, activate the logger as follows
import logging
logging.basicConfig(level=logging.INFO)

# Load pre-trained model tokenizer (vocabulary)
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

# Tokenize input
# 문장의 맨 앞에는 클래스를 뜻하는 [CLS]를 추가했다. 
# [SEP]는 문장의 끝을 나타내는 식별자로 두 문장을 구분하는 역할로도 쓰인다.
text = "[CLS] Who was Jim Henson ? [SEP] Jim Henson was a puppeteer [SEP]"
tokenized_text = tokenizer.tokenize(text)

# Mask a token that we will try to predict back with `BertForMaskedLM`
masked_index = 8
tokenized_text[masked_index] = '[MASK]'
assert tokenized_text == ['[CLS]', 'who', 'was', 'jim', 'henson', '?', '[SEP]', 'jim', '[MASK]', 'was', 'a', 'puppet', '##eer', '[SEP]']

# Convert token to vocabulary indices
indexed_tokens = tokenizer.convert_tokens_to_ids(tokenized_text)
# Define sentence A and B indices associated to 1st and 2nd sentences (see paper)
segments_ids = [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]

# input 형태는 []로 감싸, 추후 batch형태로 여러 데이터가 들어갈 수 있도록 하기 위함.
# Convert inputs to PyTorch tensors
tokens_tensor = torch.tensor([indexed_tokens])
segments_tensors = torch.tensor([segments_ids])

# Load pre-trained model (weights)
model = BertModel.from_pretrained('bert-base-uncased')

# Set the model in evaluation mode to deactivate the DropOut modules
# This is IMPORTANT to have reproducible results during evaluation!
# 평가하는 동안 재현가능한 결과를 얻는 것이 중요하다.
# elementwise_affine은 요소별 연산이다.
model.eval()

# If you have a GPU, put everything on cuda
tokens_tensor = tokens_tensor.to('cuda')
segments_tensors = segments_tensors.to('cuda')
model.to('cuda')

# Predict hidden states features for each layer
with torch.no_grad():
    # See the models docstrings for the detail of the inputs
    outputs = model(tokens_tensor, token_type_ids=segments_tensors)
    # Transformers models always output tuples.
    # See the models docstrings for the detail of all the outputs
    # outputs[0]은 토큰별 마지막 레이어의 결과값이다.
    # In our case, the first element is the hidden state of the last layer of the Bert model
    encoded_layers = outputs[0]

# We have encoded our input sequence in a FloatTensor of shape (batch size, sequence length, model hidden dimension)
assert tuple(encoded_layers.shape) == (1, len(indexed_tokens), model.config.hidden_size)
​

how to use [BertForMaskedLM] to predict a masked token

# Load pre-trained model (weights)
model = BertForMaskedLM.from_pretrained('bert-base-uncased')
model.eval()

# If you have a GPU, put everything on cuda
tokens_tensor = tokens_tensor.to('cuda')
segments_tensors = segments_tensors.to('cuda')
model.to('cuda')

# Predict all tokens
with torch.no_grad():
    outputs = model(tokens_tensor, token_type_ids=segments_tensors)
    predictions = outputs[0]

# confirm we were able to predict 'henson'
# 마스크된 토큰의 최종 output 값 : predictions[0, masked_index]
predicted_index = torch.argmax(predictions[0, masked_index]).item()
predicted_token = tokenizer.convert_ids_to_tokens([predicted_index])[0]
assert predicted_token == 'henson'
​
